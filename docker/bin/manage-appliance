#!/bin/sh

# /!\ DO NOT EDIT THIS FILE
# It is part of the appliance managing sub system of carrier. If you want
# modify the behavior of your appliance, please, modify your appliance's files
# that is the manifest file, the docker-compose file, any supplementary file of
# your appliance

set -ex

# managing appliance :
# - build: build appliance docker image, build all dependencies before
# - start: build (if necessary) + start the appliance according to its
#          configuration
# - stop: if running, stop the appliance
# Hence, stop implies start implies build

setupDockerDirectories() {
  # current directory
  USER_DIRECTORY=$(pwd -P)

  # resolving important docker directories
  DOCKER_BIN_DIRECTORY=$(dirname $0)
  cd ${DOCKER_BIN_DIRECTORY}/..

  DOCKER_ROOT_DIRECTORY=$(pwd -P)
  DOCKER_BIN_DIRECTORY=${DOCKER_ROOT_DIRECTORY}/bin
  DOCKER_LIB_DIRECTORY=${DOCKER_ROOT_DIRECTORY}/lib
  DOCKER_TMP_DIRECTORY=${DOCKER_ROOT_DIRECTORY}/tmp
  DOCKER_SHARE_DIRECTORY=${DOCKER_ROOT_DIRECTORY}/share
  DOCKER_APPLIANCES_DIRECTORY=${DOCKER_SHARE_DIRECTORY}/appliances
  DOCKER_IMAGES_DIRECTORY=${DOCKER_SHARE_DIRECTORY}/images

  # back to current directory
  cd $USER_DIRECTORY
}

validateManifestFile() {
  # first, source the manifest file
  . ${APPLIANCE_STAGING_DIRECTORY}/manifest

  # then, testing mandatory variables existence
  if [ -z "$IMAGE_NAME" ] \
     || [ -z "$CONTAINER_NAME" ] \
     || [ -z "$REQUIRED_IMAGES" ] \
     || [ -z "$SERVICE" ]; then
    error "$(
    cat << EOI
The appliance's manifest file is ill formed as it lacks one or several mandatory
variable values.
In order to build an appliance, you must provide a value for the following
mandatory variables :

  IMAGE_NAME      : the built appliance docker image name
  CONTAINER_NAME  : the container name of the running appliance
  REQUIRED_IMAGES : necessary docker images used to build the appliance
  SERVICE         : name of the service to interact with the appliance when you
                    start it

You can also set these optional variables :

  EXTENDS                   : Specify that this appliance will extend aplliances
                              specified in this variable value (NYI)
  BASE_IMAGE                : the docker base image to use to create this
                              appliance. Not that specifying an image having
                              its own libc (no matter its flavor is strongly
                              discouraged and could break your appliance)
  EXTRA_DOCKERFILE_COMMANDS : A set of Dockerfile command to append to the
                              generated Dockerfile used to build your appliance.
                              Usually, ENTRYPOINT command goes here but you're
                              not limited to this specific command. For instance,
                              you can use this variable to create supplementary
                              building stage using the last generated building
                              stage aliased with your appliance image name
  ENVIRONMENT               : a set of key=value pairs that is passed to the
                              command that run a built appliance.

EOI
    )"
    exit 1
  fi
}

usage() {
  error "$(
  cat << EOI
Invalid arguments specified. Usage :

  manage-appliance <command> <appliance> where

<command> is either :

  build
  start
  stop

and <appliance> is either :
- an absolute path to a manifest file of an appliance
- a relative path of a manifest file of an appliance
- an appliance name

Example :

  manage-appliance start devenv_cpp

will attempt to start the devenv_cpp appliance.

Notes :
- If an appliance is asked for starting and is not built beforehand, the system
  will attempt to build it first automatically.
- Attempting to stop an appliance that is not started does nothing.
EOI
  )"
}

checkArgument() {
  COMMAND="$1"

  # verify the command specified, if invalid, usage then exit 1
  if [ "$COMMAND" != 'build' ] \
     && [ "$COMMAND" != 'start' ] \
     && [ "$COMMAND" != 'stop' ]; then
    usage
    exit 1
  fi

  # try to resolve the manifest file path by:
  #  - appending it to the current user directory, useful if relative path is
  #    provided
  #  - testing directly the file path, useful if absolute path is provided
  local assumed_manifest_file_path="$2"
  if [ ! -f ${USER_DIRECTORY}/"$assumed_manifest_file_path" ] \
     && [ ! -f "$assumed_manifest_file_path" ]; then
    # not a file path, testing the appliance name
    assumed_manifest_file_path=${DOCKER_APPLIANCES_DIRECTORY}/"$2"/manifest
    if [ ! -f ${assumed_manifest_file_path} ]; then
      usage
      exit 1
    fi
  fi

  # OK, valid argument, exposing the manifest file absolute path
  MANIFEST_FILE_PATH=${assumed_manifest_file_path}

  # BTW, get the appliance name and staging directory
  APPLIANCE_NAME=$(basename $(dirname $MANIFEST_FILE_PATH))

  local staging_directory=${DOCKER_TMP_DIRECTORY}/appliances
  APPLIANCE_STAGING_DIRECTORY=${staging_directory}/$APPLIANCE_NAME
}

applianceExists() {
  # at this stage, the manifest file has been sourced and the appliance image
  # name is known
  local result="$(docker image ls --format='{{.Repository}}' $IMAGE_NAME)"

  if [ ! -z "$result" ]; then
    echo 0
  else
    echo 1
  fi
}

fillStagingArea() {
  local appliance_directory=$(dirname $MANIFEST_FILE_PATH)

  # create the intermediate appliance directory in the staging area if it does
  # not already exist
  local staging_directory=${DOCKER_TMP_DIRECTORY}/appliances
  mkdir -p $staging_directory

  # copy the project in the staging area
  cp -a $appliance_directory $staging_directory

  # copy necessary lib files in the project directory in the staging area
  cd $DOCKER_LIB_DIRECTORY

  cp \
    .dockerignore \
    exportPackageTo \
    functions.sh \
    importPackageFrom \
    $APPLIANCE_STAGING_DIRECTORY

  cd $USER_DIRECTORY
}

fetchManifest() {
  # check if the manifest has already been fetched
  if [ ! -z ${MANIFEST_FETCHED+0} ]; then
    return 0
  fi

  # use the metabarj0/manifest docker image that MUST exist
  local manifest_image=$(
    docker image ls --format='{{.Repository}}' metabarj0/manifest)

  if [ -z $manifest_image ]; then
    error "$(cat << EOI
Error: cannot find the metabarj0/manifest docker image on your docker host. This
image is built by the bootstrap process.
Possible causes are :

  - you did not bootstrap your system. See bootstrap documentation.
  - you accidentally (or not) removed or untagged the metabarj0/bootstrap docker
    image.

Taking these remarks into account should help you to resolve your
problem...exiting...
EOI
)"
    exit 1
  fi

  # fetching a copy of the docker directory of the carrier repository. master
  # branch is targeted by the update script inside the metabarj0/manifest docker
  # image
  local container_id=$(docker run --rm -d metabarj0/manifest)

  # update the manifest
  docker exec $container_id update

  # preparing manifest content to be copied on the host in the appliance staging
  # directory, then kill the running container
  cd $APPLIANCE_STAGING_DIRECTORY

  docker cp $container_id:/docker.tar.bz2 .
  docker kill $container_id

  tar -xf docker.tar.bz2
  rm -f docker.tar.bz2

  cd $USER_DIRECTORY

  MANIFEST_FETCHED=1
}

buildDependentImage() {
  # uses the metabarj0/manifest container to build required images. It'll result
  # in the creation of a docker directory inside the appliance staging directory
  fetchManifest

  local docker_in_appliance_staging=${APPLIANCE_STAGING_DIRECTORY}/docker

  local required_image_name="$1"

  # look for the manifest file providing this image, in genuine location, the
  # fetched manifest
  local image_manifest_path=$(
    find $docker_in_appliance_staging \
      -type f \
      -name manifest \
      -exec grep -EH 'PROVIDES='"$required_image_name" {} \; \
      | sed -E 's/(.+):.*$/\1/')

  if [ -z "$image_manifest_path" ]; then
    error "$( cat << EOI
Error: cannot find a suitable project to build the "$required_image_name".
Possible causes are :

  - mis-spelled required image name
  - project does not exist in the docker/share/images directory
  - project exists in your local copy of the docker/share/images directory but
    not on the distant repository that is fetched to build your dependent image
  - project is an image provided by the bootstrap process and
    your system is not bootstrapped. Such images are metabarj0/gcc,
    metabarj0/make... See bootstrap documentation for more details
  - The project exists on the distant repository and has all the necessary to be
    built BUT the 'PROVIDES' variable in the manifest file is not defined on an
    unique line (use the '\\' character after '=' for instance).

Taking these remarks into account should help you to solve you
problem...exiting
EOI
    )"

    exit 1
  fi

  # I've the absolute path of the required image's manifest file, let's build it
  # in a new sub-shell
  (
    exec ${docker_in_appliance_staging}/bin/build-image \
      "$image_manifest_path"
  )
}

checkRequiredImages() {
  # manifest file read and validated, check existing images and attempt build
  # them if necessary
  local image=
  for image in $REQUIRED_IMAGES; do
    local image_name=$(
      docker image ls --format='{{.Repository}}' $image)

    # image does not exist on the docker host
    if [ -z $image_name ]; then
      buildDependentImage "$image_name"
    fi
  done
}

mapImageNameAndBuildStages() {
  local map=
  local pair=
  local image=
  for image in $REQUIRED_IMAGES; do
    pair="$(makePair "$image" "$(generateRandomBuildStageAlias)")"
    map="$(append "$map" ' ' "$pair")"
  done

  echo "$map"
}

compileDockerfile() {
  # create a map between image used in build stages and their alias that will be
  # used later
  local name_alias_map="$mapImageNameAndBuildStages"

  # create a Dockerfile in the appliance staging directory. Using required image
  # specified in the manifest as well as other variables : 
  local dependencies_build_stages=
  local build_stage=
  local pair=
  local name=
  local alias=
  for pair in $name_alias_map; do
    # extract image name and build stage alias
    name="$(keyOf "$pair")"
    alias="$(valueOf "$pair")"

    # instruction to export the dependency image package
    build_stage="$(cat << EOI
FROM "$name" as "$alias"
RUN exportPackageTo /tmp/package
EOI
    )"

    # group these instructions together
    dependencies_build_stages="$(
      append "$dependencies_build_stages" \
             $'\n'\
             "$build_stage"
    )"
  done

  # now, create the image of the appliance, relying on BASE_IMAGE variable if
  # set, otherwise, default it to busybox
  if [ -z $BASE_IMAGE ]; then
    BASE_IMAGE=busybox
  fi

  # copy tooling to extract dependencies' packages
  local appliance_build_stage="$(cat << EOI
FROM $BASE_IMAGE as $APPLIANCE_NAME
COPY importPackageFrom /usr/local/bin
EOI
  )"

  # import each dependency image package
  local appliance_image_imports=
  local dependency_import=
  for pair in $name_alias_map; do
    # extract build stage alias
    alias="$(valueOf "$pair")"

    # create import instruction for each dependency
    dependency_import="$(cat << EOI
COPY --from=$alias /tmp/package /tmp/
RUN importPackageFrom /tmp/package
EOI
    )"

    # aggregate them
    appliance_image_imports="$(
      append "$appliance_image_imports" \
             $'\n' \
             "$dependency_import"
    )"
  done

  # final step, create the Dockerfile and appending the
  # EXTRA_DOCKERFILE_COMMANDS
  cat << EOI > ${APPLIANCE_STAGING_DIRECTORY}/Dockerfile
"$dependencies_build_stages"
"$appliance_build_stage"
"$appliance_image_imports"
"$EXTRA_DOCKERFILE_COMMANDS"
EOI
}

buildApplianceImage() {
  # now we have a dockerfile, we just have to use it to build the appliance
  # image, go to the build context
  cd $APPLIANCE_STAGING_DIRECTORY

  # build a squashed image
  docker build --squash -t $IMAGE_NAME .

  # cleanup intermediate images
  docker image prune -f

  cd $USER_DIRECTORY
}

cleanupStagingArea() {
  rm -rf $APPLIANCE_STAGING_DIRECTORY

  if [ -z $(ls ${DOCKER_TMP_DIRECTORY}/appliances) ]; then
    rm -r ${DOCKER_TMP_DIRECTORY}/appliances
  fi
}

buildAppliance() {
  if [ $(applianceExists) ]; then
    cat << EOI
Appliance '$APPLIANCE_NAME' already exists.
If you want to rebuild this appliance, consider either to retag the $IMAGE_NAME
docker repository or delete it...exiting...
EOI
    exit 0
  fi

  # prepare the staging area to build the appliance
  fillStagingArea

  # check if requested docker images are built. If not, the system will attempt
  # to build them.
  checkRequiredImages

  # then, generate the dockerfile to build the appliance docker image
  compileDockerfile

  # then, build the image
  buildApplianceImage

  # fnally, make some cleanup in the staging area
  cleanupStagingArea
}

startAppliance() {
  if [ ! $(applianceExists) ]; then
    buildAppliance
  else
    # manifest file has been read and validated. Creates the command to run the
    # service
    local environment=
    if [ ! -z $ENVIRONMENT ]; then
      local env=
      local environment_option=
      for env in $ENVIRONMENT; do
        environment_option='-e '$env
        environment="$(append "$environment" ' ' "$environment_option")"
      done
    fi

    local command='docker-compose run '\
      "$EXTRA_COMPOSE_ARGUMENTS" \
      "$environment" \
      "$SERVICE"

    (
      exec "$command"
    )
  fi
}

applianceIsRunning() {
  # manifest file has been read and validated, we know the appliance container
  # name
  local result=$(
    docker ps --format='{{.Names}} --filter='name='$CONTAINER_NAME')

  if [ -z "$result" ]; then
    echo 1 # is not running
  else
    echo 0 # is running
  fi
}

stopAppliance() {
  if [ $(applianceIsRunning) ]; then
    docker-compose stop $SERVICE
  fi
}

executeRequestedCommand() {
  # build the function name according to the provided command
  local function_name=${COMMAND}Appliance

  # make sure the manifest file is well formed and contains mandatory stuff
  validateManifestFile

  # simply call the function
  $function_name
}

setupDockerDirectories

. ${DOCKER_LIB_DIRECTORY}/functions.sh

checkArgument "$1" "$2"
executeRequestedCommand
