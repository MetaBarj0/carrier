# This Dockerfile describe how to built your project. This is not the dockerfile
# of the final image. The final dockerfile is dynamically built and the way to
# customize its content is by passing values in the EXTRA_DOCKERFILE_COMMANDS
# variable in the manifest file of the project.
# The way this dockerfile works is pretty simple:
# 1- fetch the necessary stuff to build the appliance by fetching source code
#    for instance:
#    FROM fetching_image as fetcher
#    RUN all_that_is_necessary_to_fetch_commands
#
# 2- specify each docker image used as necessary dependencies and exposing their
#    content for further build stages
#    for instance:
#    FROM dependency_image as dependency1
#    RUN exportPackageTo /path/to/dependency1pkg
#    FROM dependency_image as dependency2
#    RUN exportPackageTo /path/to/dependency2pkg
#    FROM dependency_image as dependency3
#    RUN exportPackageTo /path/to/dependency3pkg
#    ...
#
# 3- create the final build stage gathering source code and dependency packages.
#    the final build stage MUST use an image able to run a docker client
#    suitably connected to the docker socket of your docker host. Fortunately,
#    a ready-to-use image exists for that purpose: metabarj0/docker-cli.
#    Finally, a specific entrypoint must be use, this entrypoint being this
#    project's build script you've written.
#    with examples above, we could have for instance:
#    FROM metabarj0/docker-cli
#    WORDIR /path/you/want/use/optional
#    COPY --from=fetcher /path/to/fetched/resources ./
#    COPY build-sources.sh functions.sh ./
#    COPY exportPackageTo importPackageFrom /usr/local/bin/
#    COPY --from=dependency1 /path/to/dependency1pkg ./
#    RUN importPackageFrom dependency1pkg
#    COPY --from=dependency2 /path/to/dependency2pkg ./
#    RUN importPackageFrom dependency2pkg
#    COPY --from=dependency3 /path/to/dependency3pkg ./
#    RUN importPackageFrom dependency3pkg
#    ENTRYPOINT [ "/path/you/want/use/optional/project/build/script" ]

# fetching sources using a prebuilt wget from alpine, wget in busybox will be
# built later
FROM metabarj0/wget as llvm_fetch
WORKDIR /tmp
RUN wget --no-check-certificate http://releases.llvm.org/5.0.0/llvm-5.0.0.src.tar.xz
RUN wget --no-check-certificate http://releases.llvm.org/5.0.0/cfe-5.0.0.src.tar.xz

# intermediate stage to get toolchain files for the build. 
# package them to keep symlinks and don't follow them
FROM metabarj0/gcc as gcc
RUN exportPackageTo /tmp/gcc
FROM metabarj0/make as make
RUN exportPackageTo /tmp/make
FROM metabarj0/cmake as cmake
RUN exportPackageTo /tmp/cmake
FROM metabarj0/ninja as ninja
RUN exportPackageTo /tmp/ninja
FROM metabarj0/zlib as zlib
RUN exportPackageTo /tmp/zlib
FROM metabarj0/python2 as python2
RUN exportPackageTo /tmp/python2
FROM metabarj0/bzip2 as bzip2
RUN exportPackageTo /tmp/bzip2
FROM metabarj0/ncurses as ncurses
RUN exportPackageTo /tmp/ncurses

# intermediate build stage
FROM metabarj0/docker-cli as llvm_build

WORKDIR /tmp
COPY --from=llvm_fetch /tmp/llvm-5.0.0.src.tar.xz .
COPY --from=llvm_fetch /tmp/cfe-5.0.0.src.tar.xz .
COPY build-sources.sh functions.sh ./
COPY exportPackageTo importPackageFrom /usr/local/bin/

# copy and import packages of dependencies
COPY --from=gcc /tmp/gcc ./
RUN importPackageFrom gcc
COPY --from=make /tmp/make ./
RUN importPackageFrom make
COPY --from=cmake /tmp/cmake ./
RUN importPackageFrom cmake
COPY --from=ninja /tmp/ninja ./
RUN importPackageFrom ninja
COPY --from=zlib /tmp/zlib ./
RUN importPackageFrom zlib
COPY --from=python2 /tmp/python2 ./
RUN importPackageFrom python2
COPY --from=bzip2 /tmp/bzip2 ./
RUN importPackageFrom bzip2
COPY --from=ncurses /tmp/ncurses ./
RUN importPackageFrom ncurses

# the image is ready to be run
ENTRYPOINT [ "/tmp/build-sources.sh" ]
