# This is the manifest file of the appliance. It gathers all informations that
# are necessary to build the appliance from scratch as soon as your system is
# correctly bootstrapped.
# It must respect the 'sh' syntax as it defines variables that are sourced at
# runtime to build the appliance.
#
# Mandatory variables are :
#
# - IMAGE_NAME: the name of the appliance. Note that the name you give must be
#   conform to the docker image naming standard
# - CONTAINER_NAME: the name of the container of the running appliance. Note
#   that the name you give must be conform to the docker container naming
#   standard
# - REQUIRED_IMAGES: declare all images that are necessary to build the
#   appliance. If one image is not present on your docker host but defined in
#   the share/images directory, the system will attempt to build it first.
# - SERVICE: the name of the service that exists in the docker-compose.yml file
#   that the user can run to work with the appliance.
#
# Optional variable are :
#
# - ENVIRONMENT: A variable containing a list of instructions that set variables
#   to be used as environment when running the appliance's service exposed to
#   the user
# - EXTENDS: list of appliances this one will extend. Sort of inheritance. NYI.
# - BASE_IMAGE: specify the base image to use in order to build appliance. Note
#   that busybox is perfectly sufficient. Moreover, you _SHOULD_ note use any
#   image having a libc different than musl if you use metabarj0/* images as
#   part of your appliance. If not specified, automatically set to busybox
# - EXTRA_DOCKERFILE_COMMANDS: set of Dockerfile command that will be appended
#   to the end of the generated appliance's Dockerfile. Though you could specify
#   any command here as no checks are made, you will find this feature useful if
#   you need to specify environment stuff (ENV command) or a specific entrypoint
#   (ENTRYPOINT command)
# - EXTRA_COMPOSE_ARGUMENTS: optionnal supplementary arguments to pass to the
#   underlyingly called 'docker-compose run' command when starting the appliance

# These are image required to build the appliance. If these image are not built
# on your docker host but defined in the share/images/ directory, the system
# will first attempt to build them. In most case, it should succeed unless it is
# an image built by the bootstrap process. in that case, you must bootstrap your
# system first
REQUIRED_IMAGES="metabarj0/cmake
metabarj0/coreutils
metabarj0/ctags
metabarj0/gcc
metabarj0/gdb
metabarj0/git
metabarj0/make
metabarj0/ninja
metabarj0/vim"

# name of the appliance docker image
IMAGE_NAME=metabarj0/devenv_cpp

# name of the container of the running appliance
CONTAINER_NAME=devenv_cpp

# this is the main service of the appliance. This is the service one can
# interact with through the usage of the docker/bin/manage-appliance script.
SERVICE=shell

# The base appliance this appliance will extend. NYI
EXTENDS=

# this is the base image used to create the appliance docker image
BASE_IMAGE=busybox

# the appliance's dockerfile is generated. Specify here all the commands you
# need to find at the end of the Dockerfile
EXTRA_DOCKERFILE_COMMANDS="$(cat << EOI
RUN adduser -H -D devenv_cpp
RUN mkdir -p /home/devenv_cpp/.ssh \
             /home/devenv_cpp/.vim \
             /home/devenv_cpp/src
RUN chown -R devenv_cpp:devenv_cpp /home/devenv_cpp

COPY entrypoint.sh /usr/local/bin/
ENTRYPOINT [ "/usr/local/bin/entrypoint.sh" ]

USER devenv_cpp:devenv_cpp
WORKDIR /home/devenv_cpp
EOI
)"

# defines some environment necessary for the appliance to operate. be careful
# about spaces and new lines here. Don't put anything else than pure variable
# definition. You can use variable and expression substitution here as the
# manifest file will be sourced by the appliance management system.
ENVIRONMENT=

# extra arguments to pass to the docker-compose run... command invoked by the
# start command of the manage-appliance script.
EXTRA_COMPOSE_ARGUMENTS=
