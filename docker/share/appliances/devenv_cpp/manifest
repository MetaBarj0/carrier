# manifest file for the appliance.
# 
# It describes essetially how to build the image of each service.
# Indeed, the appliance system does not rely on the docker-compose builtin image
# build but implements its own for optimization purposes.
#
# Here is how it works
#
# First, you must expose a global variable names
#
#   COMPOSE_BUILD_CONTEXT
#
# This variable will map a service's image name (in your docker-compose.yml
# file) and a function name (defined in this manifest file). With these
# elements, the appliance management system will be able to generate a
# Dockerfile for each service of your appliance and build this image.
#
# Content of the COMPOSE_BUILD_CONTEXT variable
#
# It must contains a pair of value for each service defined in your
# docker-compose file.
# The first value of a pair must be the iamge name as specified in the
# docker-compose.yml file (the `image` property).
# The second value must be the name of a function defined in htis manifest file.
# This function must expose at least one global variable giving the recipe to
# build the image of the service
#
# The function providing the build context
#
# As mentioned above, at least one global variable has to be exposed :
#
#   BASE_IMAGE
#
# This is the base image used for your service image. Most of the time, busybox
# is sufficient, but metabarj0/docker-cli is perfectly fine too is you need to
# operate on your docker host from your appliance.
# Other variables can also be specified. Though they are not mandatory, they can
# provide you with flexibility to build your image is some specific ways :
#
#   REQUIRED_IMAGES
#
# Contains all images that are necessary to build the image of your service.
# Though it is not mandatory, if this one is not specified, you'll end up with a
# service image derived from the base image exposed by BASE_IMAGE variable.
# Each image specified in this variable must be buildable using the build system
# of `carrier`. When you set this variable, each specified image must be
# separated by space or new lines.
#
#   EXTRA_DOCKERFILE_COMMANDS
#
# This variable allows one to customize how the image of the service is built by
# appending specific docker commands in the generated Dockerfile. Usually, RUN,
# USER and ENTRYPOINT commands are the most often specified but one could
# aventually add build stages if necessary. Indeed, the last build stage that is
# generated is sytematically aliased with `final`
#
# As conclusion, feel free to get some inspiration by looking at existing
# appliance configuration to create your own.

# exposes all necessary global variables to build the metabarj0/devenv_cpp_shell
# image
shell_context() {
  BASE_IMAGE=busybox

  REQUIRED_IMAGES="metabarj0/bash
metabarj0/cmake
metabarj0/coreutils
metabarj0/ctags
metabarj0/gawk
metabarj0/gcc
metabarj0/gdb
metabarj0/git
metabarj0/less
metabarj0/libclang
metabarj0/make
metabarj0/ninja
metabarj0/sed
metabarj0/tar
metabarj0/vim"

  EXTRA_DOCKERFILE_COMMANDS="$(cat << EOI
RUN rm /bin/tar /bin/less /bin/sed && \
    mkdir -p /home/devenv_cpp/.ssh \
             /home/devenv_cpp/.vim \
             /home/devenv_cpp/src \
             /home/devenv_cpp/out && \
    adduser -H -D devenv_cpp && \
    chown -R devenv_cpp:devenv_cpp /home/devenv_cpp

COPY entrypoint.sh /usr/local/bin/
ENTRYPOINT [ "/usr/local/bin/entrypoint.sh" ]

USER devenv_cpp:devenv_cpp
WORKDIR /home/devenv_cpp
EOI
  )"
}

COMPOSE_BUILD_CONTEXT="metabarj0/devenv_cpp_shell shell_context"
